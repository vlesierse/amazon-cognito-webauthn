AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Amazon Cognito User Pool with WebAuthn

Metadata:
  AWS::ServerlessRepo::Application:
    Name: amazon-cognito-webauthn
    Description: >
      An Amazon Cognito user pool, pre-configured with AWS Lambda triggers to implement WebAuthn
    Author: Vincent Lesierse
    SpdxLicenseId: MIT-0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels:
      [
        "cognito",
        "passwordless",
        "authentication",
        "webauthn",
        "fido2",
        "u2f",
        "auth",
        "sample",
      ]
    HomepageUrl: https://github.com/aws-samples/amazon-cognito-webauthn/tree/master/
    SemanticVersion: 1.0.0
    SourceCodeUrl: https://github.com/aws-samples/amazon-cognito-webauthn/tree/master/

Parameters:
  UserPoolName:
    Type: String
    Description: The name you want the Amazon Cognito User Pool to be created with

Resources:
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Ref UserPoolName
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: device
          AttributeDataType: String
          Mutable: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes:
        - email
      MfaConfiguration: "OFF"
      LambdaConfig:
        PreSignUp: !GetAtt PreSignUp.Arn
        CreateAuthChallenge: !GetAtt CreateAuthChallenge.Arn
        DefineAuthChallenge: !GetAtt DefineAuthChallenge.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponse.Arn

  DefineAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: cognito-triggers/define-auth-challenge/lambda.handler
      Runtime: nodejs10.x
  DefineAuthChallengeLambdaInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DefineAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  CreateAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: cognito-triggers/create-auth-challenge/lambda.handler
      Runtime: nodejs10.x
  CreateAuthChallengeLambdaInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  VerifyAuthChallengeResponse:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: cognito-triggers/verify-auth-challenge-response/lambda.handler
      Runtime: nodejs10.x
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminUpdateUserAttributes
              Resource: "*"
  VerifyAuthChallengeResponseLambdaInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt VerifyAuthChallengeResponse.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PreSignUp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: cognito-triggers/pre-sign-up/lambda.handler
      Runtime: nodejs10.x
  PreSignUpLambdaInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUp.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: webauthn-auth-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - CUSTOM_AUTH_FLOW_ONLY
